defmodule AshCommanded.Commanded.Dsl do
  @moduledoc """
  Defines the `:commanded` DSL extension for `Ash.Resource`.
  """

  use Spark.Dsl.Extension,
    sections: [
      %Spark.Dsl.Section{
        name: :commanded,
        describe: "Defines the principal section for the DSL.",
        sections: [
        %Spark.Dsl.Section{
              name: :commands,
              describe: "Command definitions for the Commanded aggregate.",
              schema: [],
              entities: [
                %Spark.Dsl.Entity{
                      name: :command,
                      describe: "A command that will map to a Commanded command module.",
                      target: AshCommanded.Commanded.Command,
                      args: [:name],
                      schema: [
                        name: [type: :atom, required: true],
                        fields: [
                          type: {:list, :atom},
                          required: true,
                          doc: "Fields to include in the generated struct."
                        ],
                        identity_field: [
                          type: :atom,
                          required: false,
                          doc: "Field that identifies the aggregate root."
                        ],
                        command_name: [
                          type: :atom,
                          required: false,
                          doc: "Optional custom module name for the command struct."
                        ],
                        handler_name: [
                          type: :atom,
                          required: false,
                          doc: "Optional custom function clause name for the handler module."
                        ],
                        autogenerate?: [
                          type: :boolean,
                          default: true,
                          doc: "If false, the command module will not be autogenerated."
                        ],
                        autogenerate_handler?: [
                          type: :boolean,
                          default: true,
                          doc: "If false, no command handler clause will be generated."
                        ]
                      ]
                    }
              ]
            },
        %Spark.Dsl.Section{
              name: :events,
              describe: "Events that may be applied and projected by the aggregate.",
              schema: [],
              entities: [
                %Spark.Dsl.Entity{
                      name: :event,
                      describe: "An event struct definition for the aggregate.",
                      target: AshCommanded.Commanded.Event,
                      args: [:name],
                      schema: [
                        name: [type: :atom, required: true],
                        fields: [type: {:list, :atom}, required: true],
                        event_name: [type: :atom, required: false, doc: "Custom name for the generated module."],
                        autogenerate?: [
                          type: :boolean,
                          default: true,
                          doc: "If false, the event module won't be generated."
                        ]
                      ]
                    }
              ]
            },
        %Spark.Dsl.Section{
              name: :projections,
              describe: "Projections that handle events and apply changes via Ash actions.",
              schema: [],
              entities: [
                %Spark.Dsl.Entity{
                    name: :projection,
                    describe: "A projection that listens for a specific event and applies changes.",
                    target: AshCommanded.Commanded.Projection,
                    args: [:event],
                    schema: [
                      event: [type: :atom, required: true],
                      changes: [type: :any, required: true, doc: "Map of changes or function to apply changes from event."],
                      action: [type: :atom, required: false, doc: "The Ash action to call (default: :update)."],
                      projector_name: [
                        type: :atom,
                        required: false,
                        doc: "Custom module name for the generated projector."
                      ],
                      autogenerate?: [
                        type: :boolean,
                        default: true,
                        doc: "If false, no module will be generated."
                      ]
                    ]
                  }
              ]
            }
        ]
       }
      ],
    transformers: [
      AshCommanded.Commanded.Transformers.GenerateCommandModules,
      AshCommanded.Commanded.Transformers.GenerateEventModules,
      AshCommanded.Commanded.Transformers.GenerateProjectionModules,
      AshCommanded.Commanded.Transformers.GenerateAggregateModule,
      AshCommanded.Commanded.Transformers.GenerateDomainRouterModule,
      AshCommanded.Commanded.Transformers.GenerateMainRouterModule,
      AshCommanded.Commanded.Transformers.GenerateCommandedApplication
    ],
    verifiers: [
      AshCommanded.Commanded.Verifiers.ValidateCommandNames,
      AshCommanded.Commanded.Verifiers.ValidateCommandHandlers,
      AshCommanded.Commanded.Verifiers.ValidateCommandActions,
      AshCommanded.Commanded.Verifiers.ValidateCommandFields,
      AshCommanded.Commanded.Verifiers.ValidateCommandNameConflicts,
      AshCommanded.Commanded.Verifiers.ValidateProjectionEvents,
      AshCommanded.Commanded.Verifiers.ValidateProjectionActions,
      AshCommanded.Commanded.Verifiers.ValidateEventNames,
      AshCommanded.Commanded.Verifiers.ValidateEventFields,
      AshCommanded.Commanded.Verifiers.ValidateProjectionChanges
    ]
end
