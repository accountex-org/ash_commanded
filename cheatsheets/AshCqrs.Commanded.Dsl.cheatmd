# AshCommanded.Commanded.Dsl Cheatsheet

This is a cheatsheet for the AshCommanded.Commanded.Dsl extension. This extension allows you to define CQRS and Event Sourcing patterns directly in your Ash resources.

## Commands

```elixir
defmodule ECommerce.Customer do
  use Ash.Resource,
    extensions: [AshCommanded.Commanded.Dsl]

  commanded do
    commands do
      # Basic command with required fields
      command :register_customer do
        fields [:id, :email, :name]
        identity_field :id
      end
      
      # Command with custom name
      command :update_email do
        fields [:id, :email]
        command_name UpdateCustomerEmail
      end

      # Command that maps to a specific action
      command :deactivate do
        fields [:id]
        action :mark_inactive
      end

      # Command with handler options
      command :change_password do
        fields [:id, :old_password, :new_password]
        handler_name :handle_password_change
        autogenerate_handler? false
      end
      
      # Command with action mapping options
      command :update_profile do
        fields [:id, :name, :bio, :avatar_url]
        action :update_profile_details
        action_type :update
        param_mapping %{
          name: :full_name,
          bio: :biography,
          avatar_url: :profile_image
        }
      end
      
      # Command with middleware
      command :place_order do
        fields [:id, :customer_id, :items, :payment_method]
        
        middleware [
          AshCommanded.Commanded.Middleware.LoggingMiddleware,
          {AshCommanded.Commanded.Middleware.ValidationMiddleware,
            required: [:customer_id, :items, :payment_method]}
        ]
      end
      
      # Command with parameter transformation
      command :process_payment do
        fields [:id, :amount, :currency, :payment_method]
        
        transform_params do
          # Map fields
          map :payment_method, :method_type
          
          # Cast fields to specific types
          cast :amount, :decimal
          
          # Add computed fields
          compute :processed_at, fn _ -> DateTime.utc_now() end
          
          # Transform individual fields
          transform :currency, &String.upcase/1
          
          # Set default values
          default :status, "pending"
          
          # Custom transformation
          custom fn params ->
            Map.put(params, :payment_id, "PMT-#{params.id}")
          end
        end
      end
      
      # Command with parameter validation
      command :ship_order do
        fields [:id, :tracking_number, :carrier, :shipping_date]
        
        validate_params do
          # Type validation
          validate :id, type: :string
          validate :tracking_number, type: :string
          
          # Format validation
          validate :tracking_number, format: ~r/^[A-Z]{2}\d{9}[A-Z]{2}$/
          
          # Range validation
          validate :shipping_date, fn date ->
            today = Date.utc_today()
            if Date.compare(date, today) in [:eq, :gt] do
              :ok
            else
              {:error, "Shipping date cannot be in the past"}
            end
          end
          
          # Multiple validations on one field
          validate :carrier do
            one_of ["USPS", "FedEx", "UPS", "DHL"]
          end
        end
      end
    end
  end
end
```

## Events

```elixir
defmodule ECommerce.Customer do
  use Ash.Resource,
    extensions: [AshCommanded.Commanded.Dsl]

  commanded do
    events do
      # Basic event
      event :customer_registered do
        fields [:id, :email, :name]
      end
      
      # Event with custom name
      event :email_changed do
        fields [:id, :email]
        event_name CustomerEmailUpdated
      end
    end
  end
end
```

## Projections

```elixir
defmodule ECommerce.Customer do
  use Ash.Resource,
    extensions: [AshCommanded.Commanded.Dsl]

  commanded do
    projections do
      # Map an event to resource changes
      projection :customer_registered do
        action :create
        changes(%{
          status: "active",
          registered_at: &DateTime.utc_now/0
        })
      end
      
      # Using a function to compute changes
      projection :email_changed do
        action :update_by_id
        changes(fn event ->
          %{
            email: event.email,
            updated_at: DateTime.utc_now()
          }
        end)
      end

      # Optional settings
      projection :customer_deactivated do
        action :update
        changes(%{status: "inactive"})
        projector_name ECommerce.CustomProjector
        autogenerate? false
      end
    end
  end
end
```

## Event Handlers

```elixir
defmodule ECommerce.Order do
  use Ash.Resource,
    extensions: [AshCommanded.Commanded.Dsl]

  commanded do
    events do
      event :order_placed do
        fields [:id, :customer_id, :total_amount, :items]
      end
      
      event :order_shipped do
        fields [:id, :tracking_number, :shipped_at]
      end
      
      event :order_cancelled do
        fields [:id, :reason]
      end
    end
    
    event_handlers do
      # Function-based handler for sending notifications
      handler :order_confirmation do
        events [:order_placed]
        action fn event, _metadata ->
          ECommerce.Notifications.send_order_confirmation(
            event.customer_id, 
            event.id,
            event.total_amount
          )
          :ok
        end
      end
      
      # Shipping integration handler
      handler :shipping_notification do
        events [:order_shipped]
        action fn event, _metadata ->
          ECommerce.ShippingProvider.update_shipment(
            event.id,
            event.tracking_number
          )
          :ok
        end
      end
      
      # PubSub broadcasting handler
      handler :event_broadcaster do
        events [:order_placed, :order_shipped, :order_cancelled]
        publish_to "order_events"
      end
      
      # Using an Ash action as handler
      handler :refund_order do
        events [:order_cancelled]
        action :process_refund
        idempotent true
      end
      
      # Custom handler module name
      handler :analytics_tracker do
        events [:order_placed, :order_shipped, :order_cancelled]
        action fn event, _metadata ->
          ECommerce.Analytics.track_event(event)
          :ok
        end
        handler_name :business_intelligence_handler
      end
    end
  end
end
```

## Middleware

```elixir
defmodule ECommerce.Order do
  use Ash.Resource,
    extensions: [AshCommanded.Commanded.Dsl]

  commanded do
    commands do
      # Command with validation middleware
      command :place_order do
        fields [:id, :customer_id, :items, :payment_method, :shipping_address]
        
        middleware [
          # Simple middleware with no options
          AshCommanded.Commanded.Middleware.LoggingMiddleware,
          
          # Middleware with validation options
          {AshCommanded.Commanded.Middleware.ValidationMiddleware,
            # Required fields validation
            required: [:customer_id, :items, :payment_method],
            
            # Format validation
            format: [
              customer_id: ~r/^cust_\w{8}$/,
              payment_method: ~r/^(credit_card|paypal|bitcoin)$/
            ],
            
            # Custom validation function
            validate: fn command ->
              cond do
                length(command.items) == 0 ->
                  {:error, "Order must contain at least one item"}
                  
                command.payment_method == "bitcoin" && is_nil(command.shipping_address) ->
                  {:error, "Shipping address is required for Bitcoin payments"}
                  
                true -> :ok
              end
            end
          }
        ]
      end
      
      # Custom middleware example 
      command :refund_order do
        fields [:id, :amount, :reason]
        
        middleware [
          # Authorization middleware
          {ECommerce.AuthorizationMiddleware, roles: [:admin, :customer_service]},
          
          # Audit middleware
          {ECommerce.AuditMiddleware, log_level: :info, include_metadata: true},
          
          # Rate limiting middleware  
          {ECommerce.RateLimitingMiddleware, max_per_minute: 5}
        ]
      end
    end
  end
end
```

```elixir
# Define custom middleware module
defmodule ECommerce.AuthorizationMiddleware do
  use AshCommanded.Commanded.Middleware.BaseMiddleware
  
  @impl true
  def before_dispatch(command, context, next) do
    # Check user roles against required roles
    current_user = Map.get(context, :current_user, %{})
    user_roles = Map.get(current_user, :roles, [])
    required_roles = Map.get(context, :middleware_config, %{})
                     |> Map.get(:roles, [])
    
    # If any required role is present, authorize
    if Enum.any?(required_roles, &(&1 in user_roles)) do
      # Authorized - continue to next middleware
      next.(command, context)
    else
      # Not authorized - stop the chain
      {:error, :unauthorized}
    end
  end
end
```

## Error Handling

```elixir
# Define custom error handling in middleware
defmodule ECommerce.ErrorHandlingMiddleware do
  use AshCommanded.Commanded.Middleware.BaseMiddleware
  alias AshCommanded.Commanded.Error
  
  @impl true
  def after_dispatch({:error, reason}, _command, context) do
    # Normalize the error to the standard format
    standard_error = Error.normalize_error(reason)
    
    # Log the error with context
    require Logger
    Logger.error("Command failed: #{Error.format(standard_error)}, context: #{inspect(context)}")
    
    # Return the standardized error
    {:error, standard_error}
  end
  
  def after_dispatch(result, _command, _context) do
    # Pass through successful results or already standardized errors
    result
  end
end

# Using the error module directly
defmodule ECommerce.OrderService do
  alias AshCommanded.Commanded.Error
  
  def place_order(order_params) do
    with {:ok, command} <- build_command(order_params),
         {:ok, result} <- dispatch_command(command) do
      {:ok, result}
    else
      {:error, reason} ->
        # Convert to standard error format
        standard_error = Error.normalize_error(reason)
        {:error, standard_error}
    end
  end
  
  def validate_order(order) do
    cond do
      is_nil(order.customer_id) ->
        {:error, Error.validation_error("Customer ID is required", field: :customer_id)}
        
      length(order.items) == 0 ->
        {:error, Error.validation_error("Order must contain at least one item", field: :items)}
        
      order.total_amount <= 0 ->
        {:error, Error.validation_error("Total amount must be positive", 
          field: :total_amount, value: order.total_amount)}
          
      true ->
        :ok
    end
  end
end
```

## Application Configuration

```elixir
defmodule ECommerce.Store do
  use Ash.Domain,
    extensions: [AshCommanded.Commanded.Dsl]

  resources do
    resource ECommerce.Product
    resource ECommerce.Customer
    resource ECommerce.Order
  end

  commanded do
    # Resource-level middleware (applies to all commands in all resources)
    middleware [
      AshCommanded.Commanded.Middleware.LoggingMiddleware,
      {AshCommanded.Commanded.Middleware.ValidationMiddleware, 
        required: [:id]}
    ]
    
    application do
      # Required options
      otp_app :ecommerce
      event_store Commanded.EventStore.Adapters.EventStore

      # Optional settings
      pubsub :phoenix
      registry :local
      include_supervisor? true
      
      # Optional application prefix
      prefix "ECommerce.CQRS"
      
      # Aggregate snapshotting options
      snapshotting [
        snapshot_every: 100,
        snapshot_version: "1"
      ]
    end
  end
end
```